{"version":3,"sources":["number.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;;AAKA,MAAU,CAAV,C,CAAa;AACb,OAAU,EAAV,C,CAAc;;AAEd;;;;AAIA,OAAO,QAAP,CAAgB,EAAhB,E,CAAqB;AACrB,OAAO,QAAP,CAAgB,GAAhB,E,CAAsB;AACtB,OAAO,QAAP,CAAgB,QAAhB,E,CAA2B;AAC3B,OAAO,QAAP,CAAgB,CAAC,QAAjB,E,CAA4B;AAC5B,OAAO,QAAP,CAAgB,KAAhB,E,CAAwB;AACxB,OAAO,QAAP,CAAgB,IAAhB,E,CAAuB;AACvB,OAAO,QAAP,CAAgB,IAAhB,E,CAAuB;;AAEvB;;;;AAIA,OAAO,KAAP,CAAa,GAAb,E,CAAmB;AACnB,OAAO,KAAP,CAAa,EAAb,E,CAAkB;;AAElB;;;;;AAKA,OAAO,QAAP,CAAgB,OAAhB,EAAyB,EAAzB,E,CAA8B;AAC9B,OAAO,QAAP,CAAgB,OAAhB,EAAyB,CAAzB,E,CAA6B;;AAE7B;;;;AAIA,OAAO,UAAP,CAAkB,QAAlB,E,CAA6B;;AAE7B;;;;;AAKA,OAAO,SAAP,CAAiB,EAAjB,E,CAAsB;AACtB,OAAO,SAAP,CAAiB,IAAjB,E,CAAwB;AACxB,OAAO,SAAP,CAAiB,IAAjB,E,CAAwB;;AAExB;;;;;AAKA,OAAO,OAAP,CAAe,OAAf,CAAuB,EAAvB,E,CAA4B;;AAE5B;;;;AAIA,MAAM,GAAN,IAAa,GAAb,C,CAAkB;AAClB,KAAK,GAAL,CAAS,MAAM,GAAN,GAAY,GAArB,IAA4B,OAAO,OAAnC,C,CAA4C;;AAE5C;;;;;;;;AAQA,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,MAAoB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAtC,C,CAAyC;AACzC,OAAO,gBAAP,KAA4B,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAA9C,C,CAAiD;AACjD,OAAO,gBAAP,KAA4B,CAAC,OAAO,gBAApC,C,CAAsD;AACtD,OAAO,aAAP,CAAqB,KAAK,GAAL,CAAS,CAAT,EAAY,EAAZ,CAArB,E,CAAuC","file":"number-compiled.js","sourcesContent":["/**\r\n * Created by wangj on 2016/12/11.\r\n */\r\n\r\n/**\r\n * 二进制与八进制表示\r\n * ob前缀表示二进制\r\n * 0o前缀表示八进制\r\n */\r\n0b101 === 5; //true\r\n0o101 === 65; //true\r\n\r\n/**\r\n * isFinite\r\n * 判断是否是有限数字\r\n */\r\nNumber.isFinite(15); //true\r\nNumber.isFinite(NaN); //false\r\nNumber.isFinite(Infinity); //false\r\nNumber.isFinite(-Infinity); //false\r\nNumber.isFinite('str'); //false\r\nNumber.isFinite('15'); //false\r\nNumber.isFinite(true); //false\r\n\r\n/**\r\n * isNaN\r\n * 判断一个值是否是NaN\r\n */\r\nNumber.isNaN(NaN); //true\r\nNumber.isNaN(15); //false\r\n\r\n/**\r\n * parseInt(str, num)\r\n * str解析的字符串\r\n * num将字符串视为num进制\r\n */\r\nNumber.parseInt('12.34', 10); //12\r\nNumber.parseInt('11.11', 2); //3\r\n\r\n/**\r\n * parseFloat(str)\r\n * 解析小数\r\n */\r\nNumber.parseFloat('123.45'); //123.45\r\n\r\n/**\r\n * isInteger(num)\r\n * 判断是否是整形\r\n * 因为整数和浮点数是同样的存储方式，所以25和25.0视为同一个值\r\n */\r\nNumber.isInteger(25); //true\r\nNumber.isInteger(25.0); //true\r\nNumber.isInteger(\"25\"); //false\r\n\r\n/**\r\n * Number.EPSILON\r\n * 新增极小常量\r\n * 浮点数计算会有一个误差范围，引入这个常量表示可以接受的误差范围\r\n */\r\nNumber.EPSILON.toFixed(20); //\"0.00000000000000022204\"\r\n\r\n/**\r\n * 技巧一\r\n * 浮点数计算的判断\r\n */\r\n0.1 + 0.2 == 0.3; //false\r\nMath.abs(0.1 + 0.2 - 0.3) < Number.EPSILON; //true\r\n\r\n/**\r\n * isSafeInteger(num)\r\n * javascript能够精准表示的整数范围在-2^53到2^53之间，不包含两个端点\r\n * isSafeInteger用来判断一个整数是否在这个范围内\r\n * 引入两个常量\r\n * MIN_SAFE_INTEGER 最小安全数\r\n * MAX_SAFE_INTEGER 最大安全数\r\n */\r\nMath.pow(2, 53) === Math.pow(2, 53) + 1; //true\r\nNumber.Max_SAFE_INTEGER === Math.pow(2, 53) - 1; //true\r\nNumber.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER; //true\r\nNumber.isSafeInteger(Math.pow(2, 53)); //false\r\n"]}