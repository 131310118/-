{"version":3,"sources":["math.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;AAIA,KAAK,KAAL,CAAW,GAAX,E,CAAiB;AACjB,KAAK,KAAL,CAAW,CAAC,GAAZ,E,CAAkB;;AAElB;;;;AAIA,KAAK,IAAL,CAAU,CAAC,CAAX,E,CAAe;AACf,KAAK,IAAL,CAAU,CAAV,E,CAAc;AACd,KAAK,IAAL,CAAU,CAAV,E,CAAc;AACd,KAAK,IAAL,CAAU,CAAC,CAAX,E,CAAe;;AAEf;;;;AAIA,KAAK,IAAL,CAAU,CAAC,CAAX,E,CAAe;AACf,KAAK,IAAL,CAAU,CAAV,E,CAAc;AACd,KAAK,IAAL,CAAU,CAAV,E,CAAc;AACd,KAAK,IAAL,CAAU,CAAV,E,CAAc;;AAEd;;;;AAIA,KAAK,KAAL,CAAW,CAAX,E,CAAe;AACf,KAAK,KAAL,CAAW,CAAX,E,CAAe;AACf,KAAK,KAAL,CAAW,UAAX,E,CAAgD;;AAEhD;;;;;AAKC,aAAa,UAAd,GAA0B,CAA1B,C,CAA6B;AAC7B,KAAK,IAAL,CAAU,UAAV,EAAsB,UAAtB,E,CAAmC;;AAEnC;;;;;;AAMA,KAAK,MAAL,CAAY,CAAZ,E,CAAgB;AAChB,KAAK,MAAL,CAAY,CAAZ,E,CAAgB;AAChB,KAAK,MAAL,CAAY,GAAZ,E,CAAkB;AAClB,KAAK,MAAL,CAAY,KAAZ,E,CAAoB;;AAEpB;;;;AAIA,KAAK,KAAL,CAAW,CAAX,EAAc,CAAd,E,CAAkB;;AAElB;;;;AAIA,KAAK,KAAL,CAAW,CAAX,E,CAAe;AACf,KAAK,KAAL,CAAW,CAAX,MAAkB,KAAK,GAAL,CAAS,CAAT,IAAc,CAAhC,C,CAAmC;;AAEnC;;;;AAIA,KAAK,KAAL,CAAW,CAAX,E,CAAe;AACf,KAAK,KAAL,CAAW,CAAX,MAAkB,KAAK,GAAL,CAAS,CAAT,CAAlB,C,CAA+B;;AAE/B;;;;AAIA,KAAK,KAAL,CAAW,MAAX,E,CAAoB;;AAEpB;;;;AAIA,KAAK,IAAL,CAAU,CAAV,E,CAAc;;AAEd,IAAI,IAAI,CAAR;AACA,KAAK,IAAL,CAAU,CAAV,E,CAAa;AACb,KAAK,IAAL,CAAU,CAAV,E,CAAa;AACb,KAAK,IAAL,CAAU,CAAV,E,CAAa;AACb,KAAK,KAAL,CAAW,CAAX,E,CAAc;AACd,KAAK,KAAL,CAAW,CAAX,E,CAAc;AACd,KAAK,KAAL,CAAW,CAAX,E,CAAc;;AAEd;;;;AAIA","file":"math-compiled.js","sourcesContent":["/**\r\n * Created by wangj on 2016/12/11.\r\n */\r\n\r\n/**\r\n * trunc(num)\r\n * 去除小数点部分，返回整数部分\r\n */\r\nMath.trunc(4.1); //4\r\nMath.trunc(-4.1); //-4\r\n\r\n/**\r\n * sign(num)\r\n * 判断是正数、负数还是0\r\n */\r\nMath.sign(-5); //-1\r\nMath.sign(5); //+1\r\nMath.sign(0); //+0\r\nMath.sign(-0); //-0\r\n\r\n/**\r\n * cbrt(num)\r\n * 求立方根\r\n */\r\nMath.cbrt(-1); //-1\r\nMath.cbrt(0); //0\r\nMath.cbrt(1); //1\r\nMath.cbrt(8); //2\r\n\r\n/**\r\n * clz32(num)\r\n * 返回num的32位无符号整形形式有多少个前导0\r\n */\r\nMath.clz32(0); //32\r\nMath.clz32(1); //31\r\nMath.clz32(0b01000000000000000000000000000000); //1\r\n\r\n/**\r\n * imul(a, b)\r\n * 以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。\r\n * 一般用来处理数字超出32位的情况\r\n */\r\n(0x7fffffff * 0x7fffffff)|0; // 0\r\nMath.imul(0x7fffffff, 0x7fffffff); // 1\r\n\r\n/**\r\n * fround(num)\r\n * 返回一个数的单精度浮点数形式\r\n * 整数不变化\r\n * 对于无法用64个二进制位精确表示的小数会返回最接近这个小数的单精度浮点数\r\n */\r\nMath.fround(0); //0\r\nMath.fround(1); //1\r\nMath.fround(1.5); //1.5\r\nMath.fround(1.337); //1.3370000123977661\r\n\r\n/**\r\n * hypot(...)\r\n * 计算所有参数的平方和的平方根\r\n */\r\nMath.hypot(3, 4); //5\r\n\r\n/**\r\n * expm1(x)\r\n * 返回e^x - 1\r\n */\r\nMath.expm1(1); //1.718281828459045\r\nMath.expm1(1) === Math.exp(1) - 1; //true\r\n\r\n/**\r\n * log1p(x)\r\n * 返回1+x的对数\r\n */\r\nMath.log1p(0); //0\r\nMath.log1p(0) === Math.log(1); //true\r\n\r\n/**\r\n * log10(x)\r\n * 返回以10为底的x的对数\r\n */\r\nMath.log10(100000); //5\r\n\r\n/**\r\n * log2(x)\r\n * 返回以2为底的x的对数\r\n */\r\nMath.log2(2); //1\r\n\r\nvar x = 1;\r\nMath.sinh(x);// 返回x的双曲正弦（hyperbolic sine）\r\nMath.cosh(x);// 返回x的双曲余弦（hyperbolic cosine）\r\nMath.tanh(x);// 返回x的双曲正切（hyperbolic tangent）\r\nMath.asinh(x);// 返回x的反双曲正弦（inverse hyperbolic sine）\r\nMath.acosh(x);// 返回x的反双曲余弦（inverse hyperbolic cosine）\r\nMath.atanh(x);// 返回x的反双曲正切（inverse hyperbolic tangent）\r\n\r\n/**\r\n * **\r\n * 指数运算符\r\n */\r\n/*\r\n2 ** 2 === 4;// true\r\n2 ** 3 === 8; //true*/\r\n"]}