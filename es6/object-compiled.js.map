{"version":3,"sources":["object.js"],"names":[],"mappings":"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","file":"object-compiled.js","sourcesContent":["/**\r\n * Created by wangj on 2016/12/16.\r\n */\r\n\r\n/**\r\n * 简洁表达法\r\n * 支持直接写入变量和函数\r\n * @type {string}\r\n */\r\nvar foo = 'bar';\r\nvar baz = {foo}; //{foo: \"bar\"}\r\n\r\nfunction f(x, y) {\r\n    return {x, y};\r\n}\r\n//等价于\r\nfunction f(x, y) {\r\n    return {x: x, y: y};\r\n}\r\n\r\nvar o = {\r\n    method() {\r\n        return \"hello\";\r\n    }\r\n};\r\n//等价于\r\nvar o = {\r\n    method: function() {\r\n        return \"hello\";\r\n    }\r\n};\r\n\r\n/**\r\n * 属性名表达式\r\n * 字面量定义对象时，属性可以为变量\r\n * 方法名可用表达式\r\n * 不可与简洁表达法同时使用\r\n * @type {string}\r\n */\r\nvar propKey = 'foo';\r\nvar obj = {\r\n    [propkey]: true,\r\n    ['a' + 'bc']: 123,\r\n    ['h' + 'ello']() {\r\n        return 'hi';\r\n    }\r\n};\r\n\r\n/**\r\n * 函数的name属性，返回函数名\r\n * 取值存值函数会在方法名前加get或者set\r\n * Function构造函数，返回“anonymous”\r\n * bind方法构造的函数，返回“bound”加上原函数名\r\n * @type {{firstName}}\r\n */\r\nvar person = {\r\n    sayName() {\r\n        console.log(this.name);\r\n    },\r\n    get firstName() {\r\n        return \"Bob\"\r\n    }\r\n};\r\nperson.sayName.name;// \"sayName\"\r\nperson.firstName.name; //\"get firstName\"\r\n\r\n(new Function()).name;//anonymous\r\nperson.sayName.bind().name;//\"bound sayName\"\r\n\r\n/**\r\n * Object.is\r\n * 判断相等，类似于===\r\n * 不同处如下\r\n */\r\n+0 === -0; //true\r\nNaN === NaN; //false\r\n\r\nObject.is(+0, -0);//false\r\nObject.is(NaN, NaN);//true\r\n\r\n/**\r\n * Object.assign\r\n * 对象合并，将源对象可枚举属性复制到目标对象，同属性会覆盖\r\n * 非可枚举对象不会产生效果\r\n * 只拷贝源对象自身属性，不考虑继承属性\r\n * 浅拷贝，如果源对象某个属性的值是对象，那么得到这个对象的引用\r\n * 可以用来处理数组，但是会把数组视为对象，返回数组\r\n * @type {{a: number, b: number}}\r\n */\r\nvar target = {a: 1, b: 1};\r\nvar source1 = {b: 2, c: 2};\r\nvar source2 = {c: 3};\r\nObject.assign(target, source1, source2);\r\ntarget; //{a: 1, b: 2, c: 3}\r\n\r\nvar v1 = 'abc';\r\nvar v2 = true;\r\nvar v3 = 10;\r\n\r\nvar obj = Object.assign({}, v1, v2, v3);\r\nconsole.log(obj); //{\"0\": \"a\", \"1\": \"b\", \"2\": \"c\"};\r\n\r\nObject.assign([1, 2, 3], [4, 5]); //[4, 5, 3]\r\n\r\n/**\r\n * 技巧1\r\n * 克隆对象（不能克隆继承的值）\r\n * @param origin\r\n * @returns {*}\r\n */\r\nfunction clone(origin) {\r\n    return Object.assign({}, origin);\r\n}\r\n\r\n/**\r\n * 技巧二\r\n * 克隆对象，并保持继承链\r\n * @param origin\r\n * @returns {*}\r\n */\r\nfunction clone(origin) {\r\n    let originProto = Object.getPrototypeOf(origin);\r\n    return Object.assign(originProto, origin);\r\n}\r\n\r\nconst DEFAULTS = {\r\n    logLevel: 0,\r\n    outputFormat: 'html'\r\n};\r\n\r\n/**\r\n * 技巧三\r\n * 为属性指定默认值\r\n * @param options\r\n */\r\nfunction processContent(options) {\r\n    options = Object.assign({}, DEFAULTS, options)\r\n}\r\n\r\n/**\r\n * Object.getOwnPropertyDescriptor\r\n * 获取属性的描述对象\r\n * @type {{foo: number}}\r\n */\r\nvar obj = {foo: 123};\r\nObject.getOwnPropertyDescriptor(obj, 'foo');\r\n//{\r\n//    value: 123,\r\n//    writable: true,\r\n//    enumerable: true,\r\n//    configurable: true\r\n//}\r\n\r\n/**\r\n * 对象遍历\r\n * @type {{}}\r\n */\r\nvar obj = {};\r\nfor(var key in obj) {}//可枚举，包含继承\r\nObject.keys(obj);//可枚举，不包含继承\r\nObject.getOwnPropertyNames(obj);//包含不可枚举\r\nObject.getOwnPropertySymbols(obj);//所有Symbol属性\r\nReflect.ownKeys(obj);//所有属性，包含不可枚举和Symbol属性\r\n//遍历次序规则\r\n//首先按照数字排序\r\n//其次按照字符串生成时间\r\n//最后按照Symbol生成时间\r\n\r\n/**\r\n * Object.setPrototypeOf(obj, proto)\r\n * 设置原型对象\r\n * @type {{y: number, z: number}}\r\n */\r\nvar proto = {\r\n    y: 20,\r\n    z: 40\r\n};\r\nvar obj = {x: 10};\r\nObject.setPrototypeOf(obj, proto);\r\nobj.y;//20\r\n\r\n/**\r\n * Object.getPrototypeOf(obj)\r\n * 读取对象的prototype对象\r\n */\r\nObject.getPrototypeOf(obj) === proto; //true\r\n\r\n/**\r\n * keys,values,entries\r\n */\r\nObject.keys(obj); //[\"x\"]\r\nObject.values(obj); //[10]\r\nObject.entries(); //[[\"x\", 10]]"]}