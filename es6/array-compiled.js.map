{"version":3,"sources":["array.js"],"names":[],"mappings":";;AAAA;;;;AAIA;;;;;;;;;;;AAWA,IAAI,YAAY;AACZ,KAAG,GADS;AAEZ,KAAG,GAFS;AAGZ,KAAG,GAHS;AAIZ,UAAQ;AAJI,CAAhB;;AAOA,IAAI,OAAO,GAAG,KAAH,CAAS,IAAT,CAAc,SAAd,CAAX,C,CAAqC;AACrC,IAAI,OAAO,MAAM,IAAN,CAAW,SAAX,CAAX,C,CAAkC;;AAElC;;;;AAIA,MAAM,EAAN,CAAS,CAAT,EAAY,EAAZ,EAAgB,CAAhB,E,CAAoB;;AAEpB;;;;;;;AAOA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,UAAhB,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,E,CAAoC;;AAEpC;;;;;;;;;AASA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,EAAW,EAAX,EAAe,IAAf,CAAoB,UAAC,CAAD;AAAA,SAAO,IAAI,CAAX;AAAA,CAApB,E,CAAmC;;AAEnC;;;;;;AAMA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAR,EAAW,EAAX,EAAe,SAAf,CAAyB,UAAC,CAAD;AAAA,SAAO,IAAI,CAAX;AAAA,CAAzB,E,CAAwC;;AAExC;;;;;;;AAOA,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAqB,CAArB,E,CAAyB;;AAEzB;;;;;;AAMA,IAAI,SAAS,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAb;AACA,IAAI,UAAU,OAAO,OAAP,EAAd;AACA,QAAQ,GAAR,CAAY,QAAQ,IAAR,GAAe,KAA3B,E,CAAmC;AACnC,QAAQ,GAAR,CAAY,QAAQ,IAAR,GAAe,KAA3B,E,CAAmC;;AAEnC;;;;;;AAMA,IAAI,OAAO,OAAO,IAAP,EAAX;AACA,QAAQ,GAAR,CAAY,KAAK,IAAL,GAAY,KAAxB,E,CAAgC;AAChC,QAAQ,GAAR,CAAY,KAAK,IAAL,GAAY,KAAxB,E,CAAgC;;AAEhC;;;;;;AAMA,IAAI,SAAS,OAAO,MAAP,EAAb;AACA,QAAQ,GAAR,CAAY,OAAO,IAAP,GAAc,KAA1B,E,CAAkC;AAClC,QAAQ,GAAR,CAAY,OAAO,IAAP,GAAc,KAA1B,E,CAAkC","file":"array-compiled.js","sourcesContent":["/**\r\n * Created by wangj on 2016/12/12.\r\n */\r\n\r\n/**\r\n * from(obj, fun， that)\r\n * obj要转化的对象\r\n * fun类似于map方法，对每个元素进行处理\r\n * that用来绑定作用域的this\r\n * 类似数组对象转数组\r\n * 可遍历对象转数组\r\n * 字符串转数组，可识别四字节字符\r\n * 例如NodeList、arguments、Set\r\n * @type {{0: string, 1: string, 2: string, length: number}}\r\n */\r\nvar arrayLike = {\r\n    0: 'a',\r\n    1: 'b',\r\n    2: 'c',\r\n    length: 3\r\n};\r\n\r\nvar arr1 = [].slice.call(arrayLike); //['a','b','c']\r\nvar arr2 = Array.from(arrayList); //['a','b','c']\r\n\r\n/**\r\n * of(...)\r\n * 将参数转数组\r\n */\r\nArray.of(3, 11, 8); //[3,11,8]\r\n\r\n/**\r\n * copyWithin(target, start, end)\r\n * target 开始替换的位置\r\n * start 开始读取数据的位置\r\n * end 结束读取数据的位置（不包含）\r\n * 在当前数组内部，将指定位置的成员赋值到其他位置（在原数组上操作）\r\n */\r\n[1, 2, 3, 4, 5].copyWithin(0, 2, 3);// [3,2,3,4,5]\r\n\r\n/**\r\n * find(callback，that)\r\n * callback回调函数，直到找到第一个返回为true的成员\r\n * callback接受三个参数（value, index, arr）\r\n * value当前值\r\n * index当前的位置\r\n * arr原数组\r\n * that绑定作用域this\r\n */\r\n[1, 4, -5, 10].find((n) => n < 0); //-5\r\n\r\n/**\r\n * findIndex(callback)\r\n * 类似于find\r\n * 不同的是返回成员的位置\r\n * that绑定作用域this\r\n */\r\n[1, 4, -5, 10].findIndex((n) => n < 0); //2\r\n\r\n/**\r\n * fill(str, start, end)\r\n * str 填充内容\r\n * start 填充开始的位置\r\n * end 填充结束的位置（不包含）\r\n * 填充数组\r\n */\r\n['a', 'b', 'c'].fill(7); //[7,7,7]\r\n\r\n/**\r\n * entries\r\n * 返回Iterator迭代器\r\n * 遍历键值对\r\n * @type {string[]}\r\n */\r\nvar letter = ['a', 'b', 'c'];\r\nvar entries = letter.entries();\r\nconsole.log(entries.next().value); //[0, 'a']\r\nconsole.log(entries.next().value); //[0, 'b']\r\n\r\n/**\r\n * keys\r\n * 返回迭代器\r\n * 遍历键名\r\n * @type {Iterator.<number>}\r\n */\r\nvar keys = letter.keys();\r\nconsole.log(keys.next().value); //0\r\nconsole.log(keys.next().value); //1\r\n\r\n/**\r\n * values\r\n * 返回迭代器\r\n * 遍历键值\r\n * @type {Iterator.<T>}\r\n */\r\nvar values = letter.values();\r\nconsole.log(values.next().value); //'a'\r\nconsole.log(values.next().value); //'b'"]}