{"version":3,"sources":["string.js"],"names":[],"mappings":";;;;;;AAAA;;;;AAIA;;;;AAIA;;;;;;;;AAQA;;;;;;;AAOA,IAAI,IAAI,IAAR,C,CAAc;AACd,EAAE,MAAF,C,CAAU;AACV,EAAE,MAAF,CAAS,CAAT,E,CAAa;AACb,EAAE,MAAF,CAAS,CAAT,E,CAAa;AACb,EAAE,UAAF,CAAa,CAAb,E,CAAiB;AACjB,EAAE,UAAF,CAAa,CAAb,E,CAAiB;;AAEjB,EAAE,WAAF,CAAc,CAAd,E,CAAkB;AAClB,EAAE,WAAF,CAAc,CAAd,E,CAAkB;;AAElB;;;;;;;AAOA,IAAI,KAAJ;AACA,EAAE,WAAF,CAAc,CAAd,EAAiB,QAAjB,CAA0B,EAA1B,E,CAA+B;AAC/B,EAAE,WAAF,CAAc,CAAd,EAAiB,QAAjB,CAA0B,EAA1B,E,CAA+B;;AAE/B;;;;;;;;AAGA,uBAAe,CAAf,8HAAkB;AAAA,QAAT,EAAS;;AACd,YAAQ,GAAR,CAAY,GAAG,WAAH,CAAe,CAAf,EAAkB,QAAlB,CAA2B,EAA3B,CAAZ;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;AAMA,SAAS,OAAT,CAAiB,CAAjB,EAAoB;AAChB,SAAO,EAAE,WAAF,CAAc,CAAd,IAAmB,MAA1B;AACH;;AAED;;;;;;;AAOA,OAAO,YAAP,CAAoB,OAApB,E,CAA8B;;AAE9B,OAAO,aAAP,CAAqB,OAArB,E,CAA+B;AAC/B,OAAO,aAAP,CAAqB,IAArB,EAA2B,OAA3B,EAAoC,IAApC,MAA8C,gBAA9C,C,CAAgE;;AAEhE;;;;;;;AAOA,IAAI,cAAJ;;AAEA,EAAE,QAAF,CAAW,OAAX,E,CAAqB;;AAErB;;;;;;AAMA,EAAE,UAAF,CAAa,OAAb,E,CAAuB;;AAEvB;;;;;;AAMA,EAAE,QAAF,CAAW,GAAX,E,CAAiB;;AAEjB;;;;;;;AAOA,IAAI,MAAJ,CAAW,CAAX,E,CAAe;AACf,KAAK,MAAL,CAAY,GAAZ,E,CAAkB;;AAElB;;;;;;;qBAOuB,EAAC,MAAM,SAAP,EAAkB,UAAU,QAA5B,E;IAAlB,I,kBAAA,I;IAAM,Q,kBAAA,Q;;AACX,IAAI,MAAM,6BACF,KADE,GACM,IADN,GACa,MADb,GAEF,KAFE,GAEM,QAFN,GAEiB,MAFjB,GAGF,gCAHR;;AAKA,+CACY,IADZ,wBAEY,QAFZ;;AAMA;;;;;AAKA,OAAO,GAAP;AACA;;AAEA,OAAO,GAAP,CAAW,EAAC,KAAK,MAAN,EAAX,EAA0B,CAA1B,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC;AACA","file":"string-compiled.js","sourcesContent":["/**\r\n * Created by wangj on 2016/12/10.\r\n */\r\n\r\n/**\r\n * 字符表示的六种方法\r\n * 新增第六种｛｝unicode表示法\r\n */\r\n/*\r\n'\\z' === 'z'; //true\r\n'\\172' === 'z'; //true  ascii码\r\n'\\x7A' === 'z'; //true  16进制\r\n'\\u007A' === 'z'; //true    码点\r\n'\\u{7A}' === 'z' //true     unicode\r\n*/\r\n\r\n/**\r\n * codePointAt(number)\r\n * 有些字的unicode码点会大于0xFFFF，所以需要四个字节存储\r\n * charAt和charCodeAt只能获取两个字节的值\r\n * codePointAt能够正确处理四个字节的字符，对于两个字节的字符同charCodeAt\r\n * @type {string}\r\n */\r\nvar s = '𠮷'; //UTF-16编码为0xD842 0xDFB7(十进制为55362 57271),这个字不是吉祥的吉哦\r\ns.length; //2\r\ns.charAt(0); //''\r\ns.charAt(1); //''\r\ns.charCodeAt(0); //55362\r\ns.charCodeAt(1); //57271\r\n\r\ns.codePointAt(0); //134071\r\ns.codePointAt(1); //57271\r\n\r\n/**\r\n * 技巧1\r\n * 获取字符串上正确位置序号的字符\r\n * 前者获取字符串中的‘a’对应的索引是2\r\n * 后者通过for-of自动遍历字符串，它会自动识别并匹配四字节的字符\r\n * @type {string}\r\n */\r\ns = '𠮷a';\r\ns.codePointAt(0).toString(16); //\"20bb7\"\r\ns.codePointAt(2).toString(16); //\"61\"\r\n\r\n/**\r\n * 字符串增加遍历器接口，同时支持四字节字符的识别\r\n */\r\nfor (var ch of s) {\r\n    console.log(ch.codePointAt(0).toString(16));\r\n}\r\n\r\n/**\r\n * 技巧二\r\n * 判断是否为四字节字符\r\n * @param c\r\n * @returns {boolean}\r\n */\r\nfunction is32Bit(c) {\r\n    return c.codePointAt(0) > 0xFFFF;\r\n}\r\n\r\n/**\r\n * fromCodePoint\r\n * 码点转字符\r\n * fromCharCode仅识别两字节字符\r\n * fromCodePoint能够识别四字节字符\r\n * fromCodePoint接收多参数并返回合并后字符串\r\n */\r\nString.fromCharCode(0x20BB7); //\"ஷ\"\r\n\r\nString.fromCodePoint(0x20BB7); // \"𠮷\"\r\nString.formCodePoint(0x78, 0x1f680, 0x79) === 'x\\uD83D\\uDE80y'; //true\r\n\r\n/**\r\n * includes(str, number)\r\n * str 需要查找的字符串\r\n * number number至结尾\r\n * 是否找到参数字符串\r\n * @type {string}\r\n */\r\ns = 'Hello world!';\r\n\r\ns.includes('Hello'); //true\r\n\r\n/**\r\n * startsWith(str, number)\r\n * str 需要查找的字符串\r\n * number number至结尾\r\n * 是否位于字符串头部\r\n */\r\ns.startsWith('Hello'); //true\r\n\r\n/**\r\n * endsWith(str, number)\r\n * str 需要查找的字符串\r\n * number 0到number-1\r\n * 是否位于字符串尾部\r\n */\r\ns.endsWith('!'); //true\r\n\r\n/**\r\n * repeat(number)\r\n * 重复字符串\r\n * number自动去整，0到-1或NAN视为0\r\n * 0返回空字符串\r\n * 不接受负值或Infinity，会报错\r\n */\r\n'x'.repeat(3); //\"xxx\"\r\n'na'.repeat(2.9); //\"nana\"\r\n\r\n/**\r\n * 模版字符串\r\n * 前者是传统字符串拼接\r\n * 模版字符串可带入参数\r\n * 参数写在${}内\r\n * @type {{name: string, password: string}}\r\n */\r\nvar {name, password} = {name: 'wangjun', password: '123456'};\r\nvar str = '<div>this is a div</div>' +\r\n        '<p>' + name + '</p>' +\r\n        '<p>' + password + '</p>' +\r\n        '<div>this is another div</div>';\r\n\r\nstr = `<div>this is a div</div>\r\n       <p>${name}</p>\r\n       <p>${password}</p>\r\n       <div>this is another div</div>\r\n`;\r\n\r\n/**\r\n * raw(str, ...values)\r\n * 前者返回一个斜杠都被转义的字符串\r\n * 后者接受一个具有raw属性的对象，raw属性的值应该是一个数组（或类数组），返回遍历raw属性，交叉参数直至raw遍历结束\r\n */\r\nString.raw`Hi\\u000A`;\r\n//\"Hi\\\\u000A\"\r\n\r\nString.raw({raw: 'test'}, 0, 1, 2, 3, 4);\r\n//\"t0e1s2t\""]}